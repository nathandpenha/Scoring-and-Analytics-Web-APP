t.test(ToothGrowth,alternative="less",mu=9)
t.test(ToothGrowth$len,alternative="less",mu=9)
t.test(ToothGrowth$len,alternative="greater",mu=9)
t.test(ToothGrowth$len,alternative="greater",mu=9)
predict(l)
predict(lin)
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Create a sequence of numbers between -10 and 10 incrementing by 0.1.
x <- seq(-10, 10, by = .1)
# Choose the mean as 2.5 and standard deviation as 0.5.
y <- dnorm(x, mean = 2.5, sd = 0.5)
plot(x,y)
x
y
x <- seq(-10, 10, by = .1)
x
y <- dnorm(x)
y
x <- seq(-10, 10, by = .1)
# Create a sample of 50 numbers which are incremented by 1.
x <- seq(0,50,by = 1)
# Create the binomial distribution.
y <- dbinom(x,50,0.5)
plot(x,y)
teethdata=chisq.test(ToothGrowth)
dat<-data.frame(ToothGrowth$len,ToothGrowth$dose)
chisq.test(dat)
history()
m
m<-c(1:9,nrow=3,byrow=T)
m
m<-c(1:9,byrow=T)
m
m<-matrix(1:9,byrow=T,nrow=3)
m
solve(m)
inverse(m)
inv(m)
Inverse(m)
library(matlib)
install.packages("matlib")
library(matlib)
transpose(m)
t(m)
lin<-lm(ToothGrowth$dose~ToothGrowth$len)
a<-data.frame(x=10)
predict(a)
predict(y~x,a)
m
matrix.inverse(m)
inv(m)
# Create a sample of 50 numbers which are incremented by 1.
x <- seq(0,50,by = 1)
# Create the binomial distribution.
y <- dbinom(x,50,0.5)
# Give the chart file a name.
png(file = "dbinom.png")
# Plot the graph for this sample.
plot(x,y)
plot(x,y)
plot(x,y)
y
plot(x,y)
car.data <- data.frame(Cars93$AirBags, Cars93$Type)
# Create a table with the needed variables.
car.data = table(Cars93$AirBags, Cars93$Type)
print(car.data)
# Perform the Chi-Square test.
print(chisq.test(car.data))
D
q()
install.packages("rJava")
install.packages("shiny")
library(shiny)
runExample("01_hello")
library(ggplot2)
data("women")
data(women)
colnames(women)
head(women)
qplot(height,weight,data=women)
qplot(height,weight,data=women,geom = c("point","line"))
qplot(height,weight,data=women,geom = c("point","line"),color="red")
qplot(height,weight,data=women,geom = c("point","line"),color=heigh)
qplot(height,weight,data=women,geom = c("point","line"),color=height)
qplot(height,weight,data=women,geom = c("point","line"),color=height)
qplot(height,weight,data=women,geom = c("point","line"),color=height,size=weight
)
qplot(height,weight,data=women,geom = c("point","line"),color=height,size=weight)
data("iris")
iris
head(iris)
gplot(sepal.length)
gplot(sepal.length,sepal.lengthh)
gplot(sepal.length,sepal.length)
gplot(sepal.length,data=iris,geom='',fill=Species)
qplot(sepal.length,data=iris,geom='',fill=Species)
qplot(sepal.length,data=iris,fill=Species)
data("Orange")
colnames(Orange)
colnames(Orange)
qplot(age,circumferene,data=Orange,geoom=c("point","line"),color=True)
qplot(age,circumferene,data=Orange,geoom=c("point","line"),color=Tree)
qplot(age,circumference,data=Orange,geoom=c("point","line"),color=Tree)
help("Orange")
pdf("filename.ppdf")
pdf("filename.pdf")
qplot(age,circumference,data=Orange)
dev.off()
library(plumber)
setwd("I:/GitHub/Scoring-and-Analytics-Web-APP/data/")
setwd("I:/GitHub/Scoring-and-Analytics-Web-APP/")
r<-plumb("functions.R")
r$run(port = 9191)
gsub()
clean <- function(file) {
df <- read.csv(file,stringsAsFactor=FALSE,na.strings=c(NA,"-"))
# Remove rows where the batsman 'did not bat' - DNB
a <- df$Runs != "DNB"
batsman <- df[a,]
# Remove rows with 'TDNB'
c <- batsman$Runs != "TDNB"
batsman <- batsman[c,]
# Remove rows with absent
d <- batsman$Runs != "absent"
batsman <- batsman[d,]
# Remove the "* indicating not out
batsman$Runs <- as.numeric(gsub("\\*","",batsman$Runs))
c <- complete.cases(batsman)
batsmanComplete <- batsman[c,]
list(val=dim(batsmanComplete),names = names(batsmanComplete),h=head(batsmanComplete))
#Return the data frame
batsmanComplete
}
D<-clean("data/ChrisGayle_ODI_Batting.csv")
D
D
clean <- function(file) {
df <- read.csv(file,stringsAsFactor=FALSE,na.strings=c(NA,"-"))
# Remove rows where the batsman 'did not bat' - DNB
a <- df$Runs != "DNB"
batsman <- df[a,]
# Remove rows with 'TDNB'
c <- batsman$Runs != "TDNB"
batsman <- c
# Remove rows with absent
d <- batsman$Runs != "absent"
batsman <- d
# Remove the "* indicating not out
batsman$Runs <- as.numeric(gsub("\\*","",batsman$Runs))
#c <- complete.cases(batsman)
batsmanComplete <- batsman
#list(val=dim(batsmanComplete),names = names(batsmanComplete),h=head(batsmanComplete))
#Return the data frame
batsmanComplete
}
D<-clean("data/ChrisGayle_ODI_Batting.csv")
df <- read.csv("data/ChrisGayle_ODI_Batting.csv",stringsAsFactor=FALSE,na.strings=c(NA,"-"))
df
a <- df$Runs != "DNB"
a
df[a,]
c <- batsman$Runs != "TDNB"
batsman <- df[a,]
batsman
c <- batsman$Runs != "TDNB"
c
batsman <- batsman[c,]
batsman
d <- batsman$Runs != "absent"
d
batsman <- batsman[d,]
batsman
as.numeric(gsub("\\*","",batsman$Runs))
batsman$Runs <- as.numeric(gsub("\\*","",batsman$Runs))
batsman
mean(batsman$Runs)
clean <- function(file) {
df <- read.csv(file,stringsAsFactor=FALSE,na.strings=c(NA,"-"))
# Remove rows where the batsman 'did not bat' - DNB
a <- df$Runs != "DNB"
batsman <- df[a,]
# Remove rows with 'TDNB'
c <- batsman$Runs != "TDNB"
batsman <- batsman[c,]
# Remove rows with absent
d <- batsman$Runs != "absent"
batsman <- batsman[d,]
# Remove the "* indicating not out
batsman$Runs <- as.numeric(gsub("\\*","",batsman$Runs))
batsman
}
D<-clean("data/ChrisGayle_ODI_Batting.csv")
mean(D$Runs)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
batsmanAvgRunsOpposition <- function(file, name="A Latecut"){
Opposition <-Runs <- NULL
batsman <- clean(file)
# Use dplyr's summarise to group by Opposition and compute mean runs and count
meanRuns <- batsman %>% group_by(Opposition) %>% summarise(m= mean(Runs))
countInnings <- batsman %>% group_by(Opposition) %>% summarise(len=length(Runs))
# Set margins
par(mar=c(9,4,3,2))
opposition <- as.vector(meanRuns$Opposition)
values <- paste(opposition,"-",countInnings$len)
atitle <- paste(name,"'s Average Runs versus Opposition")
barplot(meanRuns$m,names=values,las=2,ylab="Average Runs",
col=rainbow(length(meanRuns$m)),main=atitle)
abline(h=50,lty=2,lwd=2)
mtext("Opposition - No of innings", side=1, line=7.5, adj=1.0, cex=1.0, col="black")
mtext("Data source-Courtesy:ESPN Cricinfo", side=3, line=0, adj=1.0, cex=0.8, col="blue")
}
batsmanAvgRunsOpposition("data/ChrisGayle_ODI_Batting.csv")
install.packages("magrittr")
install.packages("magrittr")
library(magrittr)
batsmanAvgRunsOpposition("data/ChrisGayle_ODI_Batting.csv")
library(dplyr)
batsmanAvgRunsOpposition("data/ChrisGayle_ODI_Batting.csv")
batsmanAvgRunsOpposition("data/ChrisGayle_ODI_Batting.csv")
batsmanAvgRunsOpposition("data/ChrisGayle_ODI_Batting.csv")
window()
window(10)
dev.off()
plot(cars)
batsmanAvgRunsOpposition("data/ChrisGayle_ODI_Batting.csv")
r<-plumb("functions.R")
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
batsman <- clean("data/ChrisGayle_ODI_Batting.csv")
meanRuns <- batsman %>% group_by(Ground) %>% summarise(m= mean(Runs))
countInnings <- batsman %>% group_by(Ground) %>% summarise(len=length(Runs))
par(mar=c(9,4,3,2))
ground <- as.vector(meanRuns$Ground)
values <- paste(ground,"-",countInnings$len)
atitle <- paste(name,"'s Average Runs at Ground")
barplot(meanRuns$m,names=values,las=2,ylab="Average Runs",
col=rainbow(length(meanRuns$m)),main=atitle,cex.names=0.8)
abline(h=50,lty=3,lwd=2)
abline(h=100,lty=3,lwd=2,col="blue")
mtext("Ground - No of innings", side=1, line=7.5, adj=1.0, cex=1.0, col="black")
mtext("Data source-Courtesy:ESPN Cricinfo", side=3, line=0, adj=1.0, cex=0.8, col="blue")
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
install("lubridate")
install.packages("lubridate")
r<-plumb("functions.R")
r$run(port = 9191)
install.packages("arima")
intsall.packages("forecast")
intsall.package("forecast")
install.packages("forecast")
r<-plumb("functions.R")
r$run(port = 9191)
install.packages("quadprog")
r<-plumb("functions.R")
r$run(port = 9191)
install.packages("quantmod")
r<-plumb("functions.R")
r$run(port = 9191)
history()
r<-plumb("functions.R")
r$run(port = 9191)
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
Runs=cs=no=BF=NULL
df <- clean(name,format)
clean <- function(name,format) {
file<-paste("data/",name,"_",format,"_Batting.csv",sep = "")
df <- read.csv(file,stringsAsFactor=FALSE,na.strings=c(NA,"-"))
# Remove rows where the batsman 'did not bat' - DNB
a <- df$Runs != "DNB"
batsman <- df[a,]
# Remove rows with 'TDNB'
c <- batsman$Runs != "TDNB"
batsman <- batsman[c,]
# Remove rows with absent
d <- batsman$Runs != "absent"
batsman <- batsman[d,]
# Remove the "* indicating not out
batsman$Runs <- as.numeric(gsub("\\*","",batsman$Runs))
batsman
}
df <- clean(name,format)
df <- clean(name,format)
df <- clean("ViratKohli","ODI")
b <- select(df,Runs)
b$no<-seq.int(nrow(b))
c <- select(b,no,Runs)
d <- mutate(c,cs=cumsum(Runs)/no)
plot.title= paste(name,"- Cumulative Average vs No of innings")
ggplot(d) + geom_line(aes(x=no,y=cs),col="blue") +
xlab("No of innings") + ylab("Cumulative Avg. runs") +
ggtitle(bquote(atop(.(plot.title),
atop(italic("Data source:ESPN Cricinfo"),""))))
r<-plumb("functions.R")
r$run(port = 9191)
d <- mutate(c,cs=cumsum(Runs)/no)
plot.title= paste(name,"- Cumulative Average vs No of innings")
d <- mutate(c,cs=cumsum(Runs)/no)
r<-plumb("functions.R")
r$run(port = 9191)
d <- mutate(c,cs=cumsum(Runs)/no)
plot.title= paste(name,"- Cumulative Average vs No of innings")
ggplot(d) + geom_line(aes(x=no,y=cs),col="blue") +
xlab("No of innings") + ylab("Cumulative Avg. runs") +
ggtitle(bquote(atop(.(plot.title),
atop(italic("Data source:ESPN Cricinfo"),""))))
#* @get /batsmanCumulativeAverageRuns
#* @png(width=400,400)
batsmanCumulativeAverageRuns <- function(name,format){
Runs=cs=no=BF=NULL
df <- clean(name,format)
b <- select(df,Runs)
b$no<-seq.int(nrow(b))
c <- select(b,no,Runs)
d <- mutate(c,cs=cumsum(Runs)/no)
plot.title= paste(name,"- Cumulative Average vs No of innings")
ggplot(d) + geom_line(aes(x=no,y=cs),col="blue") +
xlab("No of innings") + ylab("Cumulative Avg. runs") +
ggtitle(bquote(atop(.(plot.title),
atop(italic("Data source:ESPN Cricinfo"),""))))
}
plot.title= paste(name,"- Cumulative Average vs No of innings")
ggplot(d)
#* @get /batsmanCumulativeAverageRuns
#* @png(width=400,400)
batsmanCumulativeAverageRuns <- function(name,format){
Runs=cs=no=BF=NULL
df <- clean(name,format)
b <- select(df,Runs)
b$no<-seq.int(nrow(b))
c <- select(b,no,Runs)
d <- mutate(c,cs=cumsum(Runs)/no)
plot.title= paste(name,"- Cumulative Average vs No of innings")
ggplot(d)
}
ggplot(d) + geom_line(aes(x=no,y=cs))
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
name="ViratKohli"
format="ODI"
batsman <- clean(name,format)
# Create a vector of runs with intervals of 15
maxi <- (max(batsman$Runs/15) + 1) *15
a <- hist(batsman$Runs,breaks=v,plot=FALSE)
v <- seq(0,maxi,by=15)
a <- hist(batsman$Runs,breaks=v,plot=FALSE)
# Compute the Mean Strike Rate for each run range
SR <- NULL
b <- batsman$Runs > a$breaks[i-1] & batsman$Runs <= a$breaks[i]
c <- batsman[b,]
SR[i-1] <- mean(as.numeric(as.character(c$SR)))
for(i in 2:length(a$breaks))  {
b <- batsman$Runs > a$breaks[i-1] & batsman$Runs <= a$breaks[i]
c <- batsman[b,]
SR[i-1] <- mean(as.numeric(as.character(c$SR)))
}
# Find all intervals where there is no data i.e. NA
b <- !is.na(SR)
#Subset and remove the NAs for counts
c <- a$mid[b]
#Subset and remove the NAs for Strike Rate
SR <- SR[b]
par(mar=c(4,4,2,2))
atitle <- paste(name,"'s Mean Strike Rate vs Runs")
plot(c,SR,pch=16,xlab="Runs",ylab="Mean Strike Rate",ylim=c(0,90), main=atitle)
lines(c,predict(loess(SR~c)),col="blue",lwd=3)
mtext("Data source-Courtesy:ESPN Cricinfo", side=1, line=2, adj=1.0, cex=0.8, col="blue")
#* @get /batsmanMeanStrikeRate
#* @png(width=400,400)
batsmanMeanStrikeRate <- function(name,format){
batsman <- clean(name,format)
# Create a vector of runs with intervals of 15
maxi <- (max(batsman$Runs/15) + 1) *15
v <- seq(0,maxi,by=15)
a <- hist(batsman$Runs,breaks=v,plot=FALSE)
# Compute the Mean Strike Rate for each run range
SR <- NULL
for(i in 2:length(a$breaks))  {
b <- batsman$Runs > a$breaks[i-1] & batsman$Runs <= a$breaks[i]
c <- batsman[b,]
SR[i-1] <- mean(as.numeric(as.character(c$SR)))
}
# Find all intervals where there is no data i.e. NA
b <- !is.na(SR)
#Subset and remove the NAs for counts
c <- a$mid[b]
#Subset and remove the NAs for Strike Rate
SR <- SR[b]
par(mar=c(4,4,2,2))
atitle <- paste(name,"'s Mean Strike Rate vs Runs")
plot(c,SR,pch=16,xlab="Runs",ylab="Mean Strike Rate",ylim=c(0,90), main=atitle)
lines(c,predict(loess(SR~c)),col="blue",lwd=3)
mtext("Data source-Courtesy:ESPN Cricinfo", side=1, line=2, adj=1.0, cex=0.8, col="blue")
}
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
r<-plumb("functions.R")
r$run(port = 9191)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
r$run(port = 9191)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
ggplot(d) + geom_line(aes(x=no,y=cs))
plot.title= paste(name,"- Cumulative Average vs No of innings")
dev.off()
dev.off()
plot(cars)
dev.off()
plot(cars)
dev.off()
for(i in 1:10){dev.off()}
for(i in 1:10){dev.off()}
plot(cars)
plot(cars)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
plot(10,10)
plot(10,10)
plot(10,10)
plot(rnorm(50), rnorm(50))
